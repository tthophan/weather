# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/engine/reference/builder/

ARG NODE_VERSION=20.11.1

################################################################################
# Use node image for base image for all stages.
FROM --platform=linux/amd64 node:${NODE_VERSION}-alpine AS base

# Set working directory for all build stages.
WORKDIR /usr/src/app
ENV HUSKY=0


################################################################################
# Create a stage for installing production dependecies.
FROM base AS deps
COPY ./prisma ./prisma

# Download dependencies as a separate step to take advantage of Docker's caching.
COPY package.json .
COPY yarn.lock .
RUN yarn install --production --frozen-lockfile --ignore-scripts

################################################################################
# Create a new stage to run the application with minimal runtime dependencies
# where the necessary files are copied from the build stage.
FROM base AS final

# Use production node environment by default.
ENV NODE_ENV=production

# Copy package.json so that package manager commands can be used.
COPY --chown=node:node package.json .

# Copy the production dependencies from the deps stage and also
# the built application from the build stage into the image.
COPY --chown=node:node --from=deps /usr/src/app/node_modules ./node_modules
COPY --chown=node:node --from=deps /usr/src/app/prisma ./prisma
COPY --chown=node:node ./migrate/run.sh .
RUN apk update 
RUN apk add bash
RUN chmod 777 run.sh

# Run the application.
CMD ["./run.sh"]
